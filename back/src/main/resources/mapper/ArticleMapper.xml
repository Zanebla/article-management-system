<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="redlib.backend.dao.ArticleMapper">

  <resultMap id="BaseResultMap" type="redlib.backend.model.Article">
    <id column="id" jdbcType="INTEGER" property="id" />
    <result column="title" jdbcType="VARCHAR" property="title" />
    <result column="author" jdbcType="VARCHAR" property="author" />
    <result column="source" jdbcType="VARCHAR" property="source" />
    <result column="publish_time" jdbcType="DATE" property="publishTime" />
    <result column="url" jdbcType="LONGVARCHAR" property="url" />
    <result column="content" jdbcType="LONGVARCHAR" property="content" />
    <result column="created_at" jdbcType="TIMESTAMP" property="createdAt" />
    <result column="updated_at" jdbcType="TIMESTAMP" property="updatedAt" />
    <result column="created_by" jdbcType="INTEGER" property="createdBy" />
    <result column="updated_by" jdbcType="INTEGER" property="updatedBy" />
    <result column="deleted" jdbcType="INTEGER" property="deleted" />
  </resultMap>

  <sql id="Base_Column_List">
    id, title, author, source, publish_time, url, content, created_at, updated_at, created_by, updated_by,
    deleted
  </sql>

  <!--查-->
  <select id="selectByPrimaryKey" parameterType="java.lang.Integer" resultMap="BaseResultMap">
    select 
    <include refid="Base_Column_List" />
    from article
    where id = #{id,jdbcType=INTEGER}
  </select>

  <!--删-->
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Integer">
    delete from article
    where id = #{id,jdbcType=INTEGER}
  </delete>

  <!--增-->
  <insert id="insert" parameterType="redlib.backend.model.Article" keyProperty="id" useGeneratedKeys="true">
    insert into article (id, title, author, source, publish_time, url, content, created_at, updated_at, created_by, updated_by, deleted)
    values (#{id,jdbcType=INTEGER}, #{title,jdbcType=VARCHAR}, #{author,jdbcType=VARCHAR}, #{source,jdbcType=VARCHAR}, #{publishTime,jdbcType=DATE}, #{url,jdbcType=LONGVARCHAR}, #{content,jdbcType=LONGVARCHAR}, #{createdAt,jdbcType=TIMESTAMP},
      #{updatedAt,jdbcType=TIMESTAMP}, #{createdBy,jdbcType=INTEGER}, #{updatedBy,jdbcType=INTEGER},
      #{deleted,jdbcType=INTEGER})
  </insert>

  <insert id="insertSelective" parameterType="redlib.backend.model.Article">
    insert into article
    <trim prefix="(" suffix=")" suffixOverrides=",">
      <if test="id != null">
        id,
      </if>
      <if test="title != null">
        title,
      </if>
      <if test="author != null">
        author,
      </if>
      <if test="source != null">
        source,
      </if>
      <if test="publishTime != null">
        publish_time,
      </if>
      <if test="url != null">
        url,
      </if>
      <if test="content != null">
        content,
      </if>
      <if test="createdAt != null">
        created_at,
      </if>
      <if test="updatedAt != null">
        updated_at,
      </if>
      <if test="createdBy != null">
        created_by,
      </if>
      <if test="updatedBy != null">
        updated_by,
      </if>
      <if test="deleted != null">
        deleted,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides=",">
      <if test="id != null">
        #{id,jdbcType=INTEGER},
      </if>
      <if test="title != null">
        #{title,jdbcType=VARCHAR},
      </if>
      <if test="author != null">
        #{author,jdbcType=VARCHAR},
      </if>
      <if test="source != null">
        #{source,jdbcType=VARCHAR},
      </if>
      <if test="publishTime != null">
        #{publishTime,jdbcType=DATE},
      </if>
      <if test="url != null">
        #{url,jdbcType=LONGVARCHAR},
      </if>
      <if test="content != null">
        #{content,jdbcType=LONGVARCHAR},
      </if>
      <if test="createdAt != null">
        #{createdAt,jdbcType=TIMESTAMP},
      </if>
      <if test="updatedAt != null">
        #{updatedAt,jdbcType=TIMESTAMP},
      </if>
      <if test="createdBy != null">
        #{createdBy,jdbcType=INTEGER},
      </if>
      <if test="updatedBy != null">
        #{updatedBy,jdbcType=INTEGER},
      </if>
      <if test="deleted != null">
        #{deleted,jdbcType=INTEGER},
      </if>
    </trim>
  </insert>

  <update id="updateByPrimaryKeySelective" parameterType="redlib.backend.model.Article">
    update article
    <set>
      <if test="title != null">
        title = #{title,jdbcType=VARCHAR},
      </if>
      <if test="author != null">
        author = #{author,jdbcType=VARCHAR},
      </if>
      <if test="source != null">
        source = #{source,jdbcType=VARCHAR},
      </if>
      <if test="publishTime != null">
        publish_time = #{publishTime,jdbcType=DATE},
      </if>
      <if test="url != null">
        url = #{url,jdbcType=LONGVARCHAR},
      </if>
      <if test="content != null">
        content = #{content,jdbcType=LONGVARCHAR},
      </if>
      <if test="createdAt != null">
        created_at = #{createdAt,jdbcType=TIMESTAMP},
      </if>
      <if test="updatedAt != null">
        updated_at = #{updatedAt,jdbcType=TIMESTAMP},
      </if>
      <if test="createdBy != null">
        created_by = #{createdBy,jdbcType=INTEGER},
      </if>
      <if test="updatedBy != null">
        updated_by = #{updatedBy,jdbcType=INTEGER},
      </if>
      <if test="deleted != null">
        deleted = #{deleted,jdbcType=INTEGER},
      </if>
    </set>
    where id = #{id,jdbcType=INTEGER}
  </update>

  <!--改-->
  <update id="updateByPrimaryKey" parameterType="redlib.backend.model.Article">
    update article
    set title = #{title,jdbcType=VARCHAR},
      author = #{author,jdbcType=VARCHAR},
      source = #{source,jdbcType=VARCHAR},
      publish_time = #{publishTime,jdbcType=DATE},
      url = #{url,jdbcType=LONGVARCHAR},
      content = #{content,jdbcType=LONGVARCHAR},
      created_at = #{createdAt,jdbcType=TIMESTAMP},
      updated_at = #{updatedAt,jdbcType=TIMESTAMP},
      created_by = #{createdBy,jdbcType=INTEGER},
      updated_by = #{updatedBy,jdbcType=INTEGER},
      deleted = #{deleted,jdbcType=INTEGER}
    where id = #{id,jdbcType=INTEGER}
  </update>

  <!-- 获取名字个数(分页) -->
<!--  <select id="count" resultType="integer">-->
<!--    select count(*)-->
<!--    from article-->
<!--    <where>-->
<!--      <if test="title!= null">-->
<!--        title like #{title}-->
<!--      </if>-->
<!--    </where>-->
<!--  </select>-->

  <select id="count" resultType="integer">
    select count(*)
    from
      (select * from
        (select * from article
        <where>
          <if test="title != null">
            title like #{title}
          </if>
        </where>
        ) as filterByTitle
      <where>
        <if test="author != null">
          author like #{author}
        </if>
      </where>
      ) as filterByAuthorAndTitle
    <where>
      <if test="publishTime != null">
        publish_time like #{publishTime}
      </if>
    </where>
  </select>

  <!-- 获取部门(分页) -->
<!--  <select id="list" resultMap="BaseResultMap">-->
<!--    select-->
<!--    <include refid="Base_Column_List"/>-->
<!--    from article-->
<!--    <where>-->
<!--      <if test="queryDTO.title != null">-->
<!--        title like #{queryDTO.title}-->
<!--      </if>-->
<!--    </where>-->
<!--    limit #{offset}, #{limit}-->
<!--  </select>-->
<!-- 获取部门(分页) -->
<select id="list" resultMap="BaseResultMap">
  select
  <include refid="Base_Column_List"/>
  from
  (select * from
  (select * from article
  <where>
    <if test="queryDTO.title != null">
      title like #{queryDTO.title}
    </if>
  </where>
  ) as filterByTitle
  <where>
    <if test="queryDTO.author != null">
      author like #{queryDTO.author}
    </if>
  </where>
  ) as filterByAuthorAndTitle
  <where>
    <if test="queryDTO.publishTime != null">
      publish_time like #{queryDTO.publishTime}
    </if>
  </where>
  limit #{offset}, #{limit}
</select>

  <!-- 批量删除 -->
  <update id="deleteByCodes">
    delete from article
    where id in
    <foreach item="item" index="index" collection="codeList" open="(" separator="," close=")">
      #{item}
    </foreach>
  </update>

  <select id="getByTitle" resultMap="BaseResultMap">
    select * from article where title = #{title} limit 0,1
  </select>

  <!-- 根据id列表获取角色列表 -->
  <select id="listByIds" resultMap="BaseResultMap">
    select
    <include refid="Base_Column_List"/>
    from article
    where id in
    <foreach item="item" index="index" collection="ids" open="(" separator="," close=")">
      #{item}
    </foreach>
  </select>

  <select id="getByCode" resultType="redlib.backend.model.Article"></select>
  <select id="listByCodes" resultType="redlib.backend.model.Article"></select>
  <select id="listByName" resultType="redlib.backend.model.Article"></select>

</mapper>